{"version":3,"sources":["components/title.js","components/form.js","components/MinuteWindowForm.js","components/ChartForm.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","name","onSubmit","getWeather","type","WindowForm","getWindowValues","ChartForm","getChartValues","ReactFC","fcRoot","FusionCharts","Maps","World","Charts","FusionTheme","App","state","messages","messagesWindow","messagesStatistics","count","sumAmountBuy","avgAmountBuy","maxAmountBuy","sumAmountSell","avgAmountSell","maxAmountSell","dataForPie","dataForBar","dataForLine","_callee","e","originatingCounty","currencyFrom","currencyTo","api_call","data","messagesFromApi","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","originatingCountry","value","fetch","concat","sent","json","map","message","userId","amountBuy","amountSell","amoutSell","timePlaced","_this","setState","stop","this","_callee2","messagesinWindowFromApi","api_call_statistics","data_statistics","messageStatisticsFromAPI","_context2","transactionCount","_callee3","api_call_pie","data_pie","api_call_bar","data_bar","api_call_line","data_line","_context3","chartConfigs","width","height","dataFormat","dataSource","chart","caption","xAxisName","yAxisName","theme","chartConfigsPie","showValues","showPercentInTooltip","enableMultiSlicing","chartConfigsLine","yaxisname","rotatelabels","setadaptiveymin","title","components_form","id","MinuteWindowForm","components_ChartForm","ReactFC_default","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c88848b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n  <div>\n    <h1 className=\"title-container__title\">Messages DashBoard</h1>\n  </div>\n);\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n  <div>\n    <h2>Filters</h2>\n  <form name=\"filterForm\" onSubmit={props.getWeather}>\n    CurrencyFrom : <input type=\"text\" name=\"currencyFrom\" />\n    CurrencyTo : <input type=\"text\" name=\"currencyTo\" />\n    Originating-Country : <input type=\"text\" name=\"originatingCountry\"/>\n    <button>Get Messages</button>\n  </form>\n  </div>\n);\n\nexport default Form;","import React from \"react\";\n\nconst WindowForm = props => (\n  <div>\n    <h2>Messages In Last 60 Second Window</h2>\n    <form name=\"filterForm\" onSubmit={props.getWindowValues}>\n      CurrencyFrom : <input type=\"text\" name=\"currencyFrom\" />\n      CurrencyTo : <input type=\"text\" name=\"currencyTo\" />\n      Originating-Country : <input type=\"text\" name=\"originatingCountry\" />\n      <button>Get Messages in the Window</button>\n    </form>\n  </div>\n);\n\nexport default WindowForm;","import React from \"react\";\n\nconst ChartForm = props => (\n  <div>\n    <form name=\"filterForm\" onSubmit={props.getChartValues}>\n      <button>Update Graph</button>\n    </form>\n  </div>\n);\n\nexport default ChartForm;","import React from \"react\";\n\nimport Titles from \"./components/title\";\nimport Form from \"./components/form\";\nimport WindowForm from \"./components/MinuteWindowForm\"\nimport ChartForm from \"./components/ChartForm\"\nimport '../node_modules/react-linechart/dist/styles.css';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nimport Maps from 'fusioncharts/fusioncharts.maps';\nimport World from 'fusioncharts/maps/fusioncharts.world';\nReactFC.fcRoot(FusionCharts, Maps, World,Charts,FusionTheme);\n\nclass App extends React.Component {\n  state = {\n    messages : [],\n    messagesWindow: [],\n    messagesStatistics: {\n      count: 0,\n      sumAmountBuy: 0,\n      avgAmountBuy:0,\n      maxAmountBuy:0,\n      sumAmountSell:0,\n      avgAmountSell:0,\n      maxAmountSell:0\n    },\n    dataForPie: [],\n    dataForBar: [],\n    dataForLine: []\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const originatingCounty = e.target.elements.originatingCountry.value;\n    const currencyFrom = e.target.elements.currencyFrom.value;\n    const currencyTo = e.target.elements.currencyTo.value;\n    let api_call = await fetch(`http://currencyfair-rishikesh.us-east-2.elasticbeanstalk.com/getMessagesFilter?currencyFrom=${currencyFrom}&currencyTo=${currencyTo}&originatingCountry=${originatingCounty}`);\n\n\n    const data = await api_call.json();\n    let messagesFromApi = data.map(\n      message => {\n        return {\n          userId: message.userId,\n          currencyFrom: message.currencyFrom,\n          currencyTo: message.currencyTo,\n          amountBuy: message.amountBuy,\n          amountSell: message.amoutSell,\n          timePlaced: message.timePlaced,\n          originatingCountry: message.originatingCountry\n        }\n      }\n    )\n    this.setState({\n      messages: [].concat(messagesFromApi)\n    })\n  }\n\n  getWindowValues = async (e) => {\n    e.preventDefault();\n    const originatingCounty = e.target.elements.originatingCountry.value;\n    const currencyFrom = e.target.elements.currencyFrom.value;\n    const currencyTo = e.target.elements.currencyTo.value;\n    let api_call = await fetch(`http://currencyfair-rishikesh.us-east-2.elasticbeanstalk.com/getMessagesInAMinuteWindow?currencyFrom=${currencyFrom}&currencyTo=${currencyTo}&originatingCountry=${originatingCounty}`);\n    const data = await api_call.json();\n    let messagesinWindowFromApi = data.map(\n      message => {\n        return {\n          userId: message.userId,\n          currencyFrom: message.currencyFrom,\n          currencyTo: message.currencyTo,\n          amountBuy: message.amountBuy,\n          amountSell: message.amoutSell,\n          timePlaced: message.timePlaced,\n          originatingCountry: message.originatingCountry\n        }\n      }\n    )\n    this.setState({\n      messagesWindow: [].concat(messagesinWindowFromApi)\n    })\n    let api_call_statistics = await fetch(`http://currencyfair-rishikesh.us-east-2.elasticbeanstalk.com/getMessagesInAMinuteWindowStatistics?currencyFrom=${currencyFrom}&currencyTo=${currencyTo}&originatingCountry=${originatingCounty}`);\n    const data_statistics = await api_call_statistics.json();\n    let messageStatisticsFromAPI = {\n      count: data_statistics.transactionCount,\n      sumAmountBuy: data_statistics.sumAmountSell,\n      avgAmountBuy:data_statistics.avgAmountSell,\n      maxAmountBuy:data_statistics.maxAmountSell,\n      sumAmountSell:data_statistics.sumAmountBuy,\n      avgAmountSell:data_statistics.avgAmountBuy,\n      maxAmountSell:data_statistics.maxAmountBuy\n    }\n    this.setState({\n      messagesStatistics:messageStatisticsFromAPI\n    })\n  }\n\n  getChartValues = async (e) => {\n    e.preventDefault();\n    let api_call_pie = await fetch(`http://currencyfair-rishikesh.us-east-2.elasticbeanstalk.com/getDataForBarGraphCurrencyCount`);\n    let data_pie = await api_call_pie.json();\n    this.setState({\n      dataForBar:[].concat(data_pie)\n    });\n\n    let api_call_bar = await fetch(`http://currencyfair-rishikesh.us-east-2.elasticbeanstalk.com/getDataForPieChart`);\n    let data_bar = await api_call_bar.json();\n    this.setState({\n      dataForPie:[].concat(data_bar)\n    });\n\n    let api_call_line = await fetch(`http://currencyfair-rishikesh.us-east-2.elasticbeanstalk.com/getDataForLineGraph`);\n    let data_line = await api_call_line.json();\n    this.setState({\n      dataForLine:[].concat(data_line)\n    });\n  }\n\n  render() {\n    let myDataSource = {\n      \"chart\": {\n        \"caption\": \"Currency Transaction Count\",\n        \"xAxisName\": \"Currency\",\n        \"yAxisName\": \"Number of Transactions\",\n        \"theme\": \"fusion\"\n      },\n      \"data\": this.state.dataForBar\n    };\n\n    const chartConfigs = {\n      type: 'column2d',\n      width: 600,\n      height: 400,\n      dataFormat: 'json',\n      dataSource: myDataSource,\n    };\n\n    let pieChartData = {\n      \"chart\": {\n        \"caption\": \"Transaction Origin Ratio\",\n        \"showValues\": \"1\",\n        \"showPercentInTooltip\": \"0\",\n        \"enableMultiSlicing\": \"1\",\n        \"theme\": \"fusion\"\n      },\n      \"data\": this.state.dataForPie\n    };\n\n    const chartConfigsPie = {\n      type: 'Pie3D',\n      width: 600,\n      height: 400,\n      dataFormat: 'json',\n      dataSource: pieChartData,\n    };\n\n    let lineChartData = {\n      \"chart\": {\n        \"caption\": \"Transaction Count Over Years\",\n        \"yaxisname\": \"Transaction Count\",\n        \"rotatelabels\": \"1\",\n        \"setadaptiveymin\": \"1\",\n        \"theme\": \"fusion\"\n      },\n      \"data\": this.state.dataForLine\n    };\n\n    const chartConfigsLine ={\n      type: 'line',\n      width: 600,\n      height: 400,\n      dataFormat: 'json',\n      dataSource: lineChartData,\n    };\n\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <div id='firstTable'>\n                    <table >\n                      <tr>\n                        <th>UserId</th>\n                        <th>Currency-From</th>\n                        <th>Currency-To</th>\n                        <th>Amount-Buy</th>\n                        <th>Amount-Sell</th>\n                        <th>Time-Placed</th>\n                        <th>Originating-Country</th>\n                      </tr>\n                      {this.state.messages.map(\n                        (message) => {return (\n                          <tr>\n                            <td>{message.userId}</td>\n                            <td>{message.currencyFrom}</td>\n                            <td>{message.currencyTo}</td>\n                            <td>{message.amountBuy}</td>\n                            <td>{message.amountSell}</td>\n                            <td>{message.timePlaced}</td>\n                            <td>{message.originatingCountry}</td>\n                          </tr>\n                        )}\n                      )}\n                    </table>\n                  </div>\n                  <div>\n                    <div>\n                      <WindowForm getWindowValues={this.getWindowValues}/>\n                      <div>\n                        <div id='secondTable'>\n                          <table >\n                            <tr>\n                              <th>UserId</th>\n                              <th>Currency-From</th>\n                              <th>Currency-To</th>\n                              <th>Amount-Buy</th>\n                              <th>Amount-Sell</th>\n                              <th>Time-Placed</th>\n                              <th>Originating-Country</th>\n                            </tr>\n                            {this.state.messagesWindow.map(\n                              (message) => {return (\n                                <tr>\n                                  <td>{message.userId}</td>\n                                  <td>{message.currencyFrom}</td>\n                                  <td>{message.currencyTo}</td>\n                                  <td>{message.amountBuy}</td>\n                                  <td>{message.amountSell}</td>\n                                  <td>{message.timePlaced}</td>\n                                  <td>{message.originatingCountry}</td>\n                                </tr>\n                              ) }\n                            )}\n                          </table>\n                        </div>\n                        <div>\n                          <h3>Statistics</h3>\n                          <li>Count : {this.state.messagesStatistics.count}</li>\n                          <li>Sum - AmountBuy : {this.state.messagesStatistics.sumAmountBuy}</li>\n                          <li>Avg - AmountBuy : {this.state.messagesStatistics.avgAmountBuy}</li>\n                          <li>Highest - AmountBuy : {this.state.messagesStatistics.maxAmountBuy}</li>\n                          <li>Sum - Amount Sell : {this.state.messagesStatistics.sumAmountSell}</li>\n                          <li>Avg - Amount Sell : {this.state.messagesStatistics.avgAmountSell}</li>\n                          <li>Highest - Amount Sell : {this.state.messagesStatistics.maxAmountSell}</li>\n                        </div>\n                      </div>\n                      <div>\n                        <div id=\"updateGraph\">\n                          <ChartForm getChartValues = {this.getChartValues}/>\n                        </div>\n                        <div >\n                          <h3>Count LineChart</h3>\n                          <ReactFC {...chartConfigs}/>\n                        </div>\n                        <div >\n                          <h3>PieChart</h3>\n                          <ReactFC {...chartConfigsPie}/>\n                        </div>\n                        <div className=\"App\">\n                          <h3>LineChart</h3>\n                          <ReactFC {...chartConfigsLine}/>\n                        </div>\n                      </div>\n                    </div>\n                    <div>\n\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}